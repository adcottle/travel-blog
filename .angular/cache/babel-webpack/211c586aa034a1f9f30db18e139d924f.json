{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { GlobalConstants } from 'src/app/service/global.variables';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { Validators } from \"@angular/forms\";\nimport { ImageModalComponent } from './image-modal/image-modal.component';\nlet AlbumViewComponent = class AlbumViewComponent {\n  constructor(actRoute, imageService, crudService, userService, dialog, fb) {\n    this.actRoute = actRoute;\n    this.imageService = imageService;\n    this.crudService = crudService;\n    this.userService = userService;\n    this.dialog = dialog;\n    this.fb = fb;\n    this.user_id = [];\n    this.albumImage = [];\n    this.imageData = [];\n    this.Post = [];\n    this.submitted = false;\n    this.Favorites = [];\n    this.Comments = [];\n    this.destroy$ = new Subject();\n    this.user_id = localStorage.getItem('uid');\n    this.baseURI = GlobalConstants.baseURI;\n    this.serverURI = GlobalConstants.serverURI;\n    this.id = this.actRoute.snapshot.paramMap.get('id');\n    this.commentForm = this.fb.group({\n      comment: ['', [Validators.required]],\n      user: []\n    });\n  }\n\n  get f() {\n    return this.commentForm.controls;\n  }\n\n  ngOnInit() {\n    this.getMerged(this.id);\n    this.getCover(this.id);\n  }\n\n  getMerged(id) {\n    this.crudService.GetTrip(id).pipe(takeUntil(this.destroy$)).subscribe((tripData = []) => {\n      this.Post = tripData;\n      this.imageService.GetAlbum(id).pipe(takeUntil(this.destroy$)).subscribe((imageData = []) => {\n        var t = [tripData];\n        this.imageData = imageData;\n        this.myFavorites(this.user_id, this.imageData);\n        this.imageData.forEach(element => {\n          const mergedObj = Object.assign(Object.assign({}, t), element); //console.log(mergedObj);\n\n          this.albumImage.push(mergedObj);\n          console.log(this.albumImage);\n        });\n        this.GetImageComments(id);\n      });\n    });\n  }\n\n  myFavorites(uid, imgs) {\n    this.userService.GetMyFavorites(uid).pipe(takeUntil(this.destroy$)).subscribe(res => {\n      // console.log(res)      \n      var my_favs = res.favorites;\n      const haveIds = new Set(my_favs.map(({\n        _id\n      }) => _id));\n      var result = imgs.map(({\n        _id\n      }) => ({\n        _id,\n        favorite: haveIds.has(_id)\n      }));\n      this.Favorites = result;\n    });\n  }\n\n  makeFavorite(id) {\n    this.userService.AddFavorite(this.user_id, id).pipe(takeUntil(this.destroy$)).subscribe(response => {\n      var my_favs = response.favorites;\n      const haveIds = new Set(my_favs.map(({\n        _id\n      }) => _id));\n      var y = this.Favorites.map(({\n        _id\n      }) => ({\n        _id,\n        favorite: haveIds.has(_id)\n      }));\n      this.Favorites = y;\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  removeFavorite(img_id) {\n    if (window.confirm('Remove this image from your favorites?')) {\n      this.userService.deleteFavorite(this.user_id, img_id).pipe(takeUntil(this.destroy$)).subscribe(response => {\n        //  console.log(response);     \n        var my_favs = response.favorites;\n        const haveIds = new Set(my_favs.map(({\n          _id\n        }) => _id));\n        var y = this.Favorites.map(({\n          _id\n        }) => ({\n          _id,\n          favorite: haveIds.has(_id)\n        }));\n        this.Favorites = y;\n      });\n    }\n\n    ;\n  }\n\n  getCover(id) {\n    this.imageService.GetCover(id).pipe(takeUntil(this.destroy$)).subscribe(coverImage => {\n      var ci = coverImage;\n      var uri = this.serverURI + '/images/file/';\n      var CIuri = ci[0].filename;\n      this.Cover = uri + CIuri;\n    });\n  }\n\n  openModal(filename) {\n    this.imageService.OpenImage(filename).pipe(takeUntil(this.destroy$)).subscribe(img => {\n      this.dialog.open(ImageModalComponent, {\n        height: '100%',\n        width: 'auto',\n        data: {\n          imageData: img\n        }\n      });\n    });\n  }\n\n  GetImageComments(album_id) {\n    this.imageService.GetAlbumComments(album_id).pipe(takeUntil(this.destroy$)).subscribe(com => {\n      if (com) {\n        this.Comments = com;\n      }\n    });\n  }\n\n  addComment(id, album_id) {\n    //console.log(album_id);\n    this.submitted = true; // stop here if form is invalid\n\n    if (this.commentForm.invalid) {\n      return;\n    } else {\n      this.commentForm.get('user').setValue(localStorage.getItem('uid')); // console.log(this.commentForm.value);\n\n      this.imageService.AddComment(id, this.commentForm.value);\n      this.commentForm.reset();\n      Object.keys(this.commentForm.controls).forEach(key => {\n        this.commentForm.controls[key].setErrors(null);\n      });\n      this.GetImageComments(album_id);\n    }\n  }\n\n  deleteComment(img_id, c_id, alb_id) {\n    if (window.confirm('Delete your comment?')) {\n      this.imageService.deleteComment(img_id, c_id).pipe(takeUntil(this.destroy$)).subscribe(response => {\n        // console.log(response);         \n        this.GetImageComments(alb_id);\n      });\n    }\n\n    ;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next(true); // Unsubscribe from the subject\n\n    this.destroy$.unsubscribe();\n  }\n\n};\nAlbumViewComponent = __decorate([Component({\n  selector: 'app-album-view',\n  templateUrl: './album-view.component.html',\n  styleUrls: ['./album-view.component.css']\n})], AlbumViewComponent);\nexport { AlbumViewComponent };","map":null,"metadata":{},"sourceType":"module"}