{"ast":null,"code":"import { GlobalConstants } from '../global.variables';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n      this.currentUser = {};\n      this.serverURI = GlobalConstants.serverURI;\n      this.endpoint = this.serverURI + '/auth';\n    } // Sign-up\n\n\n    signUp(user) {\n      let api = `${this.endpoint}/register-user`;\n      return this.http.post(api, user).pipe(catchError(this.handleError));\n    } // Sign-in\n    // signIn(user: User) {\n    //   return this.http.post<any>(`${this.endpoint}/signin`, user)\n    //     .subscribe((tkn: any) => { \n    //       localStorage.setItem('access_token', tkn.token)\n    //       this.getUserProfile(tkn._id).subscribe((res) => {\n    //         this.currentUser = res;\n    //         var uid = res.msg._id\n    //         localStorage.setItem('uid', uid)\n    //         this.router.navigate(['home']);\n    //       })\n    //     })      \n    // }\n\n\n    signIn(user) {\n      return this.http.post(`${this.endpoint}/signin`, user).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    }\n\n    getToken() {\n      return localStorage.getItem('access_token');\n    }\n\n    get isLoggedIn() {\n      let authToken = localStorage.getItem('access_token');\n      return authToken !== null ? true : false;\n    }\n\n    doLogout() {\n      let removeToken = localStorage.removeItem('access_token');\n\n      if (removeToken == null) {\n        this.router.navigate(['login']);\n      }\n    } // User profile\n\n\n    getUserProfile(id) {\n      let api = `${this.endpoint}/user-profile/${id}`;\n      return this.http.get(api, {\n        headers: this.headers\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Error \n\n\n    handleError(error) {\n      let msg = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // client-side error\n        msg = error.error.message;\n      } else {\n        // server-side error\n        msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(msg);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}