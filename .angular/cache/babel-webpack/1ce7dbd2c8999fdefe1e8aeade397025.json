{"ast":null,"code":"import { GlobalConstants } from '../global.variables';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ImagesService = /*#__PURE__*/(() => {\n  class ImagesService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // Http Header\n\n      this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n      this.serverURI = GlobalConstants.serverURI;\n      this.REST_API = this.serverURI + '/images';\n    } // Get all Images in JSON\n\n\n    GetImagesList() {\n      return this.httpClient.get(`${this.REST_API}/files`);\n    }\n\n    GetLatest() {\n      return this.httpClient.get(`${this.REST_API}/latest-posts`);\n    } //Get Cover photo\n\n\n    GetCover(album_id) {\n      let API_URL = `${this.REST_API}/cover/${album_id}`; // console.log(API_URL);\n\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      });\n    } // Get single trip\n\n\n    GetAlbum(id) {\n      let API_URL = `${this.REST_API}/view-album/${id}`;\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Open Image for Modal\n\n\n    OpenImage(filename) {\n      let API_URL = `${this.REST_API}/image/${filename}`;\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Get single image for favorites\n\n\n    GetFavorite(id) {\n      let API_URL = `${this.REST_API}/favorite-image/${id}`;\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } //Get list of picture IDs in an album\n\n\n    GetAlbumList(id) {\n      let API_URL = `${this.REST_API}/album-images/${id}`;\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    }\n\n    //  //Get Album Comments\n    GetAlbumComments(id) {\n      //  console.log(id)     \n      let API_URL = `${this.REST_API}/album-comments/${id}`;\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } //AddComment to Image\n\n\n    AddComment(id, data) {\n      let API_URL = `${this.REST_API}/add-comment/${id}`;\n      return this.httpClient.put(API_URL, data, {\n        headers: this.httpHeaders\n      }).subscribe(data => {});\n    } //Add tags to Image\n\n\n    AddTags(id, data) {\n      let API_URL = `${this.REST_API}/add-tags/${id}`;\n      return this.httpClient.put(API_URL, data, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } //Remove a comment\n\n\n    deleteComment(img_id, c_id) {\n      // console.log('made it to service' + '     ' + img_id  + '     ' + c_id)\n      let API_URL = `${this.REST_API}/delete-comment/${img_id}/${c_id}`;\n      return this.httpClient.delete(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Error \n\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Handle client error\n        errorMessage = error.error.message;\n      } else {\n        // Handle server error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  ImagesService.ɵfac = function ImagesService_Factory(t) {\n    return new (t || ImagesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ImagesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImagesService,\n    factory: ImagesService.ɵfac,\n    providedIn: 'root'\n  });\n  return ImagesService;\n})();","map":null,"metadata":{},"sourceType":"module"}