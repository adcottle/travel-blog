{"ast":null,"code":"import { GlobalConstants } from '../global.variables';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let CrudService = /*#__PURE__*/(() => {\n  class CrudService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router; // Http Header\n\n      this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n      this.serverURI = GlobalConstants.serverURI;\n      this.endpoint = this.serverURI + '/trips';\n    } // Add\n\n\n    AddTrip(data) {\n      let api = `${this.endpoint}/add-trip`; // console.log(data);\n\n      return this.http.post(api, data).pipe(catchError(this.handleError));\n    } // Get all trips\n\n\n    GetTrips() {\n      return this.http.get(`${this.endpoint}/`);\n    } // Get single trip\n\n\n    GetTrip(_id) {\n      let API_URL = `${this.endpoint}/trip/${_id}`;\n      return this.http.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Get latest posts\n\n\n    GetLatest() {\n      return this.http.get(`${this.endpoint}/latest-posts`);\n    } // Update\n\n\n    updateTrip(_id, data) {\n      let API_URL = `${this.endpoint}/update-trip/${_id}`;\n      return this.http.put(API_URL, data, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Delete\n\n\n    deleteTrip(_id) {\n      let API_URL = `${this.endpoint}/delete-trip/${_id}`;\n      return this.http.delete(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Error \n\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Handle client error\n        errorMessage = error.error.message;\n      } else {\n        // Handle server error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  CrudService.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  CrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n  return CrudService;\n})();","map":null,"metadata":{},"sourceType":"module"}