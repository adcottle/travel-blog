{"ast":null,"code":"import { GlobalConstants } from '../global.variables';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router; // Http Header\n\n      this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n      this.serverURI = GlobalConstants.serverURI;\n      this.endpoint = this.serverURI + '/users';\n    } // Get User Names\n\n\n    getUserProfile(id) {\n      let API_URL = `${this.endpoint}/user-name/${id}`;\n      return this.http.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } //Get a list favorites\n\n\n    GetMyFavorites(id) {\n      return this.http.get(`${this.endpoint}/my-favorites/${id}`);\n    } // Update\n\n\n    AddFavorite(id, img_id) {\n      let API_URL = `${this.endpoint}/add-favorites/${id}/${img_id}`;\n      return this.http.put(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } //Remove a favorite\n\n\n    deleteFavorite(id, img_id) {\n      // console.log('made it to service' + '     ' + id  + '     ' + img_id)\n      let API_URL = `${this.endpoint}/delete-favorite/${id}/${img_id}`;\n      return this.http.delete(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Error \n\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Handle client error\n        errorMessage = error.error.message;\n      } else {\n        // Handle server error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}