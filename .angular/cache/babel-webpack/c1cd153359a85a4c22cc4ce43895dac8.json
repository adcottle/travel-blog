{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, Renderer2, Component, ViewEncapsulation, Inject, Input, EventEmitter, ChangeDetectorRef, NgZone, Output, HostBinding, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction GridsterComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n  }\n}\n\nfunction GridsterComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n  }\n}\n\nconst _c0 = [\"*\"];\n\nfunction GridsterItemComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_1_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_1_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_2_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_2_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_3_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_3_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_4_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_4_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_5_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_5_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_6_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_6_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_7_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_7_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_8_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_8_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nvar GridType = /*#__PURE__*/(() => {\n  (function (GridType) {\n    GridType[\"Fit\"] = \"fit\";\n    GridType[\"ScrollVertical\"] = \"scrollVertical\";\n    GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n    GridType[\"Fixed\"] = \"fixed\";\n    GridType[\"VerticalFixed\"] = \"verticalFixed\";\n    GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n  })(GridType || (GridType = {}));\n\n  return GridType;\n})();\nvar DisplayGrid = /*#__PURE__*/(() => {\n  (function (DisplayGrid) {\n    DisplayGrid[\"Always\"] = \"always\";\n    DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n    DisplayGrid[\"None\"] = \"none\";\n  })(DisplayGrid || (DisplayGrid = {}));\n\n  return DisplayGrid;\n})();\nvar CompactType = /*#__PURE__*/(() => {\n  (function (CompactType) {\n    CompactType[\"None\"] = \"none\";\n    CompactType[\"CompactUp\"] = \"compactUp\";\n    CompactType[\"CompactLeft\"] = \"compactLeft\";\n    CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n    CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n    CompactType[\"CompactRight\"] = \"compactRight\";\n    CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n    CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n    CompactType[\"CompactDown\"] = \"compactDown\";\n    CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\n    CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\n    CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\n    CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\n  })(CompactType || (CompactType = {}));\n\n  return CompactType;\n})();\nvar DirTypes = /*#__PURE__*/(() => {\n  (function (DirTypes) {\n    DirTypes[\"LTR\"] = \"ltr\";\n    DirTypes[\"RTL\"] = \"rtl\";\n  })(DirTypes || (DirTypes = {}));\n\n  return DirTypes;\n})();\n\nclass GridsterCompact {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  checkCompact() {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', 1);\n      }\n    }\n  }\n\n  checkCompactItem(item) {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.moveTillCollision(item, 'x', 1);\n        this.moveTillCollision(item, 'y', 1);\n      }\n    }\n  }\n\n  checkCompactMovement(direction, delta) {\n    let widgetMoved = false;\n    this.gridster.grid.forEach(widget => {\n      if (widget.$item.compactEnabled !== false) {\n        const moved = this.moveTillCollision(widget.$item, direction, delta);\n\n        if (moved) {\n          widgetMoved = true;\n          widget.item[direction] = widget.$item[direction];\n          widget.itemChanged();\n        }\n      }\n    });\n\n    if (widgetMoved) {\n      this.checkCompact();\n    }\n  }\n\n  moveTillCollision(item, direction, delta) {\n    item[direction] += delta;\n\n    if (this.gridster.checkCollision(item)) {\n      item[direction] -= delta;\n      return false;\n    } else {\n      this.moveTillCollision(item, direction, delta);\n      return true;\n    }\n  }\n\n}\n\nconst GridsterConfigService = {\n  gridType: GridType.Fit,\n  scale: 1,\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250,\n  fixedRowHeight: 250,\n  keepFixedHeightInMobile: false,\n  keepFixedWidthInMobile: false,\n  setGridSize: false,\n  compactType: CompactType.None,\n  mobileBreakpoint: 640,\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1,\n  maxCols: 100,\n  minRows: 1,\n  maxRows: 100,\n  defaultItemCols: 1,\n  defaultItemRows: 1,\n  maxItemCols: 50,\n  maxItemRows: 50,\n  minItemCols: 1,\n  minItemRows: 1,\n  minItemArea: 1,\n  maxItemArea: 2500,\n  addEmptyRowsCount: 0,\n  rowHeightRatio: 1,\n  margin: 10,\n  outerMargin: true,\n  outerMarginTop: null,\n  outerMarginRight: null,\n  outerMarginBottom: null,\n  outerMarginLeft: null,\n  useTransformPositioning: true,\n  scrollSensitivity: 10,\n  scrollSpeed: 20,\n  initCallback: undefined,\n  destroyCallback: undefined,\n  gridSizeChangedCallback: undefined,\n  itemChangeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false,\n  enableEmptyCellContextMenu: false,\n  enableEmptyCellDrop: false,\n  enableEmptyCellDrag: false,\n  enableOccupiedCellDrop: false,\n  emptyCellClickCallback: undefined,\n  emptyCellContextMenuCallback: undefined,\n  emptyCellDropCallback: undefined,\n  emptyCellDragCallback: undefined,\n  emptyCellDragMaxCols: 50,\n  emptyCellDragMaxRows: 50,\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false,\n  draggable: {\n    delayStart: 0,\n    enabled: false,\n    ignoreContentClass: 'gridster-item-content',\n    ignoreContent: false,\n    dragHandleClass: 'drag-handler',\n    stop: undefined,\n    start: undefined,\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false,\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n\n  },\n  resizable: {\n    delayStart: 0,\n    enabled: false,\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    },\n    stop: undefined,\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n\n  },\n  swap: true,\n  swapWhileDragging: false,\n  pushItems: false,\n  disablePushOnDrag: false,\n  disablePushOnResize: false,\n  pushDirections: {\n    north: true,\n    east: true,\n    south: true,\n    west: true\n  },\n  pushResizeItems: false,\n  displayGrid: DisplayGrid.OnDragAndResize,\n  disableWindowResize: false,\n  disableWarnings: false,\n  scrollToNewItems: false,\n  disableScrollHorizontal: false,\n  disableScrollVertical: false,\n  disableAutoPositionOnConflict: false,\n  dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n\n};\n\nclass GridsterUtils {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static merge(obj1, obj2, properties) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func, wait) {\n    let timeout;\n    return function () {\n      const context = this;\n      const args = arguments;\n\n      const later = () => {\n        timeout = undefined;\n        func.apply(context, args);\n      };\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static checkTouchEvent(e) {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster, e) {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster, e) {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n\n    if (target.hasAttribute('class')) {\n      // @ts-ignore\n      const classnames = target.getAttribute('class').split(' ');\n\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    } // @ts-ignore\n\n\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n\n  static checkContentClass(target, current, contentClass) {\n    if (!target || target === current) {\n      return false;\n    } // @ts-ignore\n\n\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      // @ts-ignore\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a, b) {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n}\n\nclass GridsterEmptyCell {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.initialItem; // @ts-ignore\n\n    delete this.gridster.movingItem;\n\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    } // @ts-ignore\n\n\n    delete this.gridster;\n\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions() {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu && this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e) {\n    if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n\n    const item = this.getValidItemFromEvent(e);\n\n    if (!item) {\n      return;\n    }\n\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e) {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n\n    if (!item) {\n      return;\n    }\n\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e) {\n    const item = this.getValidItemFromEvent(e);\n\n    if (!item) {\n      return;\n    }\n\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n\n    if (item) {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'move';\n      }\n\n      this.gridster.movingItem = item;\n    } else {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'none';\n      }\n\n      this.gridster.movingItem = null;\n    }\n\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e) {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    const leftMouseButtonCode = 1;\n\n    if (!item || e.buttons !== leftMouseButtonCode) {\n      return;\n    }\n\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e) {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n\n    setTimeout(() => {\n      this.initialItem = null;\n\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getPixelsX(e, rect) {\n    const scale = this.gridster.options.scale;\n\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n\n  getPixelsY(e, rect) {\n    const scale = this.gridster.options.scale;\n\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n\n  getValidItemFromEvent(e, oldItem) {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n\n    return item;\n  }\n\n}\n\nclass GridsterRenderer {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  updateItem(el, item, renderer) {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows - 1) * this.gridster.$options.margin + item.rows * this.gridster.$options.fixedRowHeight + 'px');\n      } else {\n        renderer.setStyle(el, 'height', item.rows * this.gridster.curWidth / item.cols + 'px');\n      }\n\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin; // set the cell style\n\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom = null;\n      let marginRight = null;\n\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      const widthRatio = this.gridster.$options.rowHeightRatio;\n      const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n      this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i) {\n    return { ...this.getLeftPosition(this.gridster.curColWidth * i),\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i) {\n    return { ...this.getTopPosition(this.gridster.curRowHeight * i),\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getLeftPosition(d) {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)'\n      };\n    } else {\n      return {\n        left: this.getLeftMargin() + dPosition + 'px'\n      };\n    }\n  }\n\n  getTopPosition(d) {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)'\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n\n  clearCellPosition(renderer, el) {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n\n  setCellPosition(renderer, el, x, y) {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n\n  getLeftMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  getTopMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n}\n\nlet GridsterPreviewComponent = /*#__PURE__*/(() => {\n  class GridsterPreviewComponent {\n    constructor(el, renderer) {\n      this.renderer = renderer;\n      this.el = el.nativeElement;\n    }\n\n    ngOnInit() {\n      this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\n    }\n\n    ngOnDestroy() {\n      this.sub.unsubscribe(); // @ts-ignore\n\n      delete this.el;\n    }\n\n    previewStyle(item) {\n      if (item) {\n        this.renderer.setStyle(this.el, 'display', 'block');\n        this.gridRenderer.updateItem(this.el, item, this.renderer);\n      } else {\n        this.renderer.setStyle(this.el, 'display', '');\n      }\n    }\n\n  }\n\n  GridsterPreviewComponent.ɵfac = function GridsterPreviewComponent_Factory(t) {\n    return new (t || GridsterPreviewComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2));\n  };\n\n  GridsterPreviewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GridsterPreviewComponent,\n    selectors: [[\"gridster-preview\"]],\n    inputs: {\n      previewStyle$: \"previewStyle$\",\n      gridRenderer: \"gridRenderer\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function GridsterPreviewComponent_Template(rf, ctx) {},\n    styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"],\n    encapsulation: 2\n  });\n  return GridsterPreviewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GridsterComponent = /*#__PURE__*/(() => {\n  class GridsterComponent {\n    constructor(el, renderer, cdRef, zone) {\n      this.renderer = renderer;\n      this.cdRef = cdRef;\n      this.zone = zone;\n      this.columns = 0;\n      this.rows = 0;\n      this.gridColumns = [];\n      this.gridRows = [];\n      this.previewStyle$ = new EventEmitter();\n      this.el = el.nativeElement;\n      this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n      this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n      this.mobile = false;\n      this.curWidth = 0;\n      this.curHeight = 0;\n      this.grid = [];\n      this.curColWidth = 0;\n      this.curRowHeight = 0;\n      this.dragInProgress = false;\n      this.emptyCell = new GridsterEmptyCell(this);\n      this.compact = new GridsterCompact(this);\n      this.gridRenderer = new GridsterRenderer(this);\n    } // ------ Function for swapWhileDragging option\n    // identical to checkCollision() except that here we add boundaries.\n\n\n    static checkCollisionTwoItemsForSwaping(item, item2) {\n      // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n      const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n      const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n      const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n      const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n      return item.x + horizontalBoundaryItem1 < item2.x + item2.cols && item.x + item.cols > item2.x + horizontalBoundaryItem2 && item.y + verticalBoundaryItem1 < item2.y + item2.rows && item.y + item.rows > item2.y + verticalBoundaryItem2;\n    }\n\n    checkCollisionTwoItems(item, item2) {\n      const collision = item.x < item2.x + item2.cols && item.x + item.cols > item2.x && item.y < item2.y + item2.rows && item.y + item.rows > item2.y;\n\n      if (!collision) {\n        return false;\n      }\n\n      if (!this.$options.allowMultiLayer) {\n        return true;\n      }\n\n      const defaultLayerIndex = this.$options.defaultLayerIndex;\n      const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n      const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n      return layerIndex === layerIndex2;\n    }\n\n    ngOnInit() {\n      if (this.options.initCallback) {\n        this.options.initCallback(this);\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (changes.options) {\n        this.setOptions();\n        this.options.api = {\n          optionsChanged: this.optionsChanged.bind(this),\n          resize: this.onResize.bind(this),\n          getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n          getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n          getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n          getItemComponent: item => this.getItemComponent(item)\n        };\n        this.columns = this.$options.minCols;\n        this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n        this.setGridSize();\n        this.calculateLayout();\n      }\n    }\n\n    resize() {\n      let height;\n      let width;\n\n      if (this.$options.gridType === 'fit' && !this.mobile) {\n        width = this.el.offsetWidth;\n        height = this.el.offsetHeight;\n      } else {\n        width = this.el.clientWidth;\n        height = this.el.clientHeight;\n      }\n\n      if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n        this.onResize();\n      }\n    }\n\n    setOptions() {\n      this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n\n      if (!this.$options.disableWindowResize && !this.windowResize) {\n        this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n      } else if (this.$options.disableWindowResize && this.windowResize) {\n        this.windowResize();\n        this.windowResize = null;\n      }\n\n      this.emptyCell.updateOptions();\n    }\n\n    optionsChanged() {\n      this.setOptions();\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.updateOptions();\n      }\n\n      this.calculateLayout();\n    }\n\n    ngOnDestroy() {\n      this.previewStyle$.complete();\n\n      if (this.windowResize) {\n        this.windowResize();\n      }\n\n      if (this.options && this.options.destroyCallback) {\n        this.options.destroyCallback(this);\n      }\n\n      if (this.options && this.options.api) {\n        this.options.api.resize = undefined;\n        this.options.api.optionsChanged = undefined;\n        this.options.api.getNextPossiblePosition = undefined;\n        this.options.api = undefined;\n      }\n\n      this.emptyCell.destroy(); // @ts-ignore\n\n      delete this.emptyCell;\n      this.compact.destroy(); // @ts-ignore\n\n      delete this.compact;\n    }\n\n    onResize() {\n      if (this.el.clientWidth) {\n        if (this.options.setGridSize) {\n          // reset width/height so the size is recalculated afterwards\n          this.renderer.setStyle(this.el, 'width', '');\n          this.renderer.setStyle(this.el, 'height', '');\n        }\n\n        this.setGridSize();\n        this.calculateLayout();\n      }\n    }\n\n    checkIfToResize() {\n      const clientWidth = this.el.clientWidth;\n      const offsetWidth = this.el.offsetWidth;\n      const scrollWidth = this.el.scrollWidth;\n      const clientHeight = this.el.clientHeight;\n      const offsetHeight = this.el.offsetHeight;\n      const scrollHeight = this.el.scrollHeight;\n      const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n      const horizontalScrollPresent = clientHeight < offsetHeight && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n\n      if (verticalScrollPresent) {\n        return false;\n      }\n\n      return !horizontalScrollPresent;\n    }\n\n    setGridSize() {\n      const el = this.el;\n      let width;\n      let height;\n\n      if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n        width = el.offsetWidth;\n        height = el.offsetHeight;\n      } else {\n        width = el.clientWidth;\n        height = el.clientHeight;\n      }\n\n      this.curWidth = width;\n      this.curHeight = height;\n    }\n\n    setGridDimensions() {\n      this.setGridSize();\n\n      if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n        this.mobile = !this.mobile;\n        this.renderer.addClass(this.el, 'mobile');\n      } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n        this.mobile = !this.mobile;\n        this.renderer.removeClass(this.el, 'mobile');\n      }\n\n      let rows = this.$options.minRows;\n      let columns = this.$options.minCols;\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n\n        if (!widget.notPlaced) {\n          rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n          columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n        }\n      }\n\n      rows += this.$options.addEmptyRowsCount;\n\n      if (this.columns !== columns || this.rows !== rows) {\n        this.columns = columns;\n        this.rows = rows;\n\n        if (this.options.gridSizeChangedCallback) {\n          this.options.gridSizeChangedCallback(this);\n        }\n      }\n    }\n\n    calculateLayout() {\n      if (this.compact) {\n        this.compact.checkCompact();\n      }\n\n      this.setGridDimensions();\n\n      if (this.$options.outerMargin) {\n        let marginWidth = -this.$options.margin;\n\n        if (this.$options.outerMarginLeft !== null) {\n          marginWidth += this.$options.outerMarginLeft;\n          this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n        } else {\n          marginWidth += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n        }\n\n        if (this.$options.outerMarginRight !== null) {\n          marginWidth += this.$options.outerMarginRight;\n          this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n        } else {\n          marginWidth += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n        }\n\n        this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n        let marginHeight = -this.$options.margin;\n\n        if (this.$options.outerMarginTop !== null) {\n          marginHeight += this.$options.outerMarginTop;\n          this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n        } else {\n          marginHeight += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n        }\n\n        if (this.$options.outerMarginBottom !== null) {\n          marginHeight += this.$options.outerMarginBottom;\n          this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n        } else {\n          marginHeight += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n        }\n\n        this.curRowHeight = (this.curHeight - marginHeight) / this.rows * this.$options.rowHeightRatio;\n      } else {\n        this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n        this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows * this.$options.rowHeightRatio;\n        this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n      }\n\n      this.gridRenderer.updateGridster();\n\n      if (this.$options.setGridSize) {\n        this.renderer.addClass(this.el, 'gridSize');\n\n        if (!this.mobile) {\n          this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n          this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n        }\n      } else {\n        this.renderer.removeClass(this.el, 'gridSize');\n        this.renderer.setStyle(this.el, 'width', '');\n        this.renderer.setStyle(this.el, 'height', '');\n      }\n\n      this.updateGrid();\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.setSize();\n        widget.drag.toggle();\n        widget.resize.toggle();\n      }\n\n      setTimeout(this.resize.bind(this), 100);\n    }\n\n    updateGrid() {\n      if (this.$options.displayGrid === 'always' && !this.mobile) {\n        this.renderer.addClass(this.el, 'display-grid');\n      } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n        this.renderer.addClass(this.el, 'display-grid');\n      } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n        this.renderer.removeClass(this.el, 'display-grid');\n      }\n\n      this.setGridDimensions();\n      this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n      this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n      this.cdRef.markForCheck();\n    }\n\n    addItem(itemComponent) {\n      if (itemComponent.$item.cols === undefined) {\n        itemComponent.$item.cols = this.$options.defaultItemCols;\n        itemComponent.item.cols = itemComponent.$item.cols;\n        itemComponent.itemChanged();\n      }\n\n      if (itemComponent.$item.rows === undefined) {\n        itemComponent.$item.rows = this.$options.defaultItemRows;\n        itemComponent.item.rows = itemComponent.$item.rows;\n        itemComponent.itemChanged();\n      }\n\n      if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n        this.autoPositionItem(itemComponent);\n      } else if (this.checkCollision(itemComponent.$item)) {\n        if (!this.$options.disableWarnings) {\n          itemComponent.notPlaced = true;\n          console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n        }\n\n        if (!this.$options.disableAutoPositionOnConflict) {\n          this.autoPositionItem(itemComponent);\n        } else {\n          itemComponent.notPlaced = true;\n        }\n      }\n\n      this.grid.push(itemComponent);\n      this.calculateLayoutDebounce();\n    }\n\n    removeItem(itemComponent) {\n      this.grid.splice(this.grid.indexOf(itemComponent), 1);\n      this.calculateLayoutDebounce();\n\n      if (this.options.itemRemovedCallback) {\n        this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n      }\n    }\n\n    checkCollision(item) {\n      let collision = false;\n\n      if (this.options.itemValidateCallback) {\n        collision = !this.options.itemValidateCallback(item);\n      }\n\n      if (!collision && this.checkGridCollision(item)) {\n        collision = true;\n      }\n\n      if (!collision) {\n        const c = this.findItemWithItem(item);\n\n        if (c) {\n          collision = c;\n        }\n      }\n\n      return collision;\n    }\n\n    checkGridCollision(item) {\n      const noNegativePosition = item.y > -1 && item.x > -1;\n      const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n      const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n      const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n      const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n      const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n      const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n      const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n      const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n      const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n      const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n      const area = item.cols * item.rows;\n      const inMinArea = minAreaLimit <= area;\n      const inMaxArea = maxAreaLimit >= area;\n      return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n    }\n\n    findItemWithItem(item) {\n      let widgetsIndex = 0;\n      let widget;\n\n      for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n        widget = this.grid[widgetsIndex];\n\n        if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n          return widget;\n        }\n      }\n\n      return false;\n    }\n\n    findItemsWithItem(item) {\n      const a = [];\n      let widgetsIndex = 0;\n      let widget;\n\n      for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n        widget = this.grid[widgetsIndex];\n\n        if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n          a.push(widget);\n        }\n      }\n\n      return a;\n    }\n\n    autoPositionItem(itemComponent) {\n      if (this.getNextPossiblePosition(itemComponent.$item)) {\n        itemComponent.notPlaced = false;\n        itemComponent.item.x = itemComponent.$item.x;\n        itemComponent.item.y = itemComponent.$item.y;\n        itemComponent.itemChanged();\n      } else {\n        itemComponent.notPlaced = true;\n\n        if (!this.$options.disableWarnings) {\n          console.warn('Can\\'t be placed in the bounds of the dashboard!/n' + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n        }\n      }\n    }\n\n    getNextPossiblePosition(newItem, startingFrom = {}) {\n      if (newItem.cols === -1) {\n        newItem.cols = this.$options.defaultItemCols;\n      }\n\n      if (newItem.rows === -1) {\n        newItem.rows = this.$options.defaultItemRows;\n      }\n\n      this.setGridDimensions();\n      let rowsIndex = startingFrom.y || 0;\n      let colsIndex;\n\n      for (; rowsIndex < this.rows; rowsIndex++) {\n        newItem.y = rowsIndex;\n        colsIndex = startingFrom.x || 0;\n\n        for (; colsIndex < this.columns; colsIndex++) {\n          newItem.x = colsIndex;\n\n          if (!this.checkCollision(newItem)) {\n            return true;\n          }\n        }\n      }\n\n      const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n      const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n      const addToRows = this.rows <= this.columns && canAddToRows;\n\n      if (!addToRows && canAddToColumns) {\n        newItem.x = this.columns;\n        newItem.y = 0;\n        return true;\n      } else if (canAddToRows) {\n        newItem.y = this.rows;\n        newItem.x = 0;\n        return true;\n      }\n\n      return false;\n    }\n\n    getFirstPossiblePosition(item) {\n      const tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem);\n      return tmpItem;\n    }\n\n    getLastPossiblePosition(item) {\n      let farthestItem = {\n        y: 0,\n        x: 0\n      };\n      farthestItem = this.grid.reduce((prev, curr) => {\n        const currCoords = {\n          y: curr.$item.y + curr.$item.rows - 1,\n          x: curr.$item.x + curr.$item.cols - 1\n        };\n\n        if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n          return currCoords;\n        } else {\n          return prev;\n        }\n      }, farthestItem);\n      const tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem, farthestItem);\n      return tmpItem;\n    }\n\n    pixelsToPositionX(x, roundingMethod, noLimit) {\n      const position = roundingMethod(x / this.curColWidth);\n\n      if (noLimit) {\n        return position;\n      } else {\n        return Math.max(position, 0);\n      }\n    }\n\n    pixelsToPositionY(y, roundingMethod, noLimit) {\n      const position = roundingMethod(y / this.curRowHeight);\n\n      if (noLimit) {\n        return position;\n      } else {\n        return Math.max(position, 0);\n      }\n    }\n\n    positionXToPixels(x) {\n      return x * this.curColWidth;\n    }\n\n    positionYToPixels(y) {\n      return y * this.curRowHeight;\n    }\n\n    getItemComponent(item) {\n      return this.grid.find(c => c.item === item);\n    } // ------ Functions for swapWhileDragging option\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n\n\n    checkCollisionForSwaping(item) {\n      let collision = false;\n\n      if (this.options.itemValidateCallback) {\n        collision = !this.options.itemValidateCallback(item);\n      }\n\n      if (!collision && this.checkGridCollision(item)) {\n        collision = true;\n      }\n\n      if (!collision) {\n        const c = this.findItemWithItemForSwapping(item);\n\n        if (c) {\n          collision = c;\n        }\n      }\n\n      return collision;\n    } // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n\n\n    findItemWithItemForSwapping(item) {\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n\n      for (; widgetsIndex > -1; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n\n        if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n          return widget;\n        }\n      }\n\n      return false;\n    }\n\n    previewStyle(drag = false) {\n      if (this.movingItem) {\n        if (this.compact && drag) {\n          this.compact.checkCompactItem(this.movingItem);\n        }\n\n        this.previewStyle$.next(this.movingItem);\n      } else {\n        this.previewStyle$.next(null);\n      }\n    } // ------ End of functions for swapWhileDragging option\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n    static getNewArrayLength(length, overallSize, size) {\n      const newLength = Math.max(length, Math.floor(overallSize / size));\n\n      if (newLength < 0) {\n        return 0;\n      }\n\n      if (Number.isFinite(newLength)) {\n        return Math.floor(newLength);\n      }\n\n      return 0;\n    }\n\n  }\n\n  GridsterComponent.ɵfac = function GridsterComponent_Factory(t) {\n    return new (t || GridsterComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(NgZone));\n  };\n\n  GridsterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GridsterComponent,\n    selectors: [[\"gridster\"]],\n    inputs: {\n      options: \"options\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 4,\n    consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\", 3, \"gridRenderer\", \"previewStyle$\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]],\n    template: function GridsterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelement(3, \"gridster-preview\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"gridRenderer\", ctx.gridRenderer)(\"previewStyle$\", ctx.previewStyle$);\n      }\n    },\n    directives: [i2.NgForOf, GridsterPreviewComponent, i2.NgStyle],\n    styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"],\n    encapsulation: 2\n  });\n  return GridsterComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass GridsterPush {\n  constructor(gridsterItem) {\n    this.iteration = 0;\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster; // @ts-ignore\n\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction, disable) {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      this.iteration = 0;\n      const pushed = this.push(this.gridsterItem, direction);\n\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems() {\n    let i = this.pushedItemsTemp.length - 1;\n\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  push(gridsterItem, direction) {\n    if (this.iteration > 100) {\n      console.warn('max iteration reached');\n      return false;\n    }\n\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n\n    if (direction === '') {\n      return false;\n    }\n\n    const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest; // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n    });\n    let i = 0;\n    let itemCollision;\n    let makePush = true;\n    const pushedItems = [];\n\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n\n      if (itemCollision === this.gridsterItem) {\n        continue;\n      }\n\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\n        // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n\n    this.iteration++;\n    return makePush;\n  }\n\n  trySouth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryNorth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryEast(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryWest(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  addToTempPushed(gridsterItem) {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n\n    this.pushedItemsTempPath[i].push({\n      x: gridsterItem.$item.x,\n      y: gridsterItem.$item.y\n    });\n  }\n\n  removeFromTempPushed(gridsterItem) {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n\n    if (!tempPosition) {\n      return;\n    }\n\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      });\n    }\n  }\n\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  removeFromPushedItem(gridsterItem) {\n    const i = this.pushedItems.indexOf(gridsterItem);\n\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n\n    return change;\n  }\n\n}\n\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\n\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.s || intervalS) {\n        return;\n      }\n\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.n || intervalN) {\n        return;\n      }\n\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== e.clientY) {\n      cancelVertical();\n    }\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.e || intervalE) {\n        return;\n      }\n\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.w || intervalW) {\n        return;\n      }\n\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== e.clientX) {\n      cancelHorizontal();\n    }\n  }\n}\n\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    } // @ts-ignore\n\n\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: lastMouse.clientX,\n      clientY\n    });\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    } // @ts-ignore\n\n\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX,\n      clientY: lastMouse.clientY\n    });\n  }, intervalDuration);\n}\n\nfunction cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n\nclass GridsterSwap {\n  constructor(gridsterItem) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster; // @ts-ignore\n\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems() {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack() {\n    if (this.swapedItem) {\n      const x = this.swapedItem.$item.x;\n      const y = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n    }\n  }\n\n  restoreSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy) {\n    let gridsterItemCollision;\n\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      const diffX = copyX - copyCollisionX;\n      const diffY = copyY - copyCollisionY;\n      gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n      gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n      pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n      pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n\n}\n\nclass GridsterDraggable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.collision = false;\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    } // @ts-ignore\n\n\n    delete this.gridsterItem; // @ts-ignore\n\n    delete this.gridster; // @ts-ignore\n\n    delete this.collision;\n\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({\n      x: this.gridsterItem.item.x || 0,\n      y: this.gridsterItem.item.y || 0\n    });\n  }\n\n  dragMove(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e) {\n    if (this.gridster.options.scale) {\n      this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n    } else {\n      this.calculateItemPositionWithoutScale(e);\n    }\n\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  calculateItemPositionWithScale(e, scale) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + (e.clientX - this.originalClientX) / scale + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + (e.clientX - this.originalClientX) / scale + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = this.originalClientY + (e.clientY - this.originalClientY) / scale + this.offsetTop - this.diffTop;\n  }\n\n  calculateItemPositionWithoutScale(e) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n\n  dragStop(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag() {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n\n    if (this.push) {\n      this.push.restoreItems();\n    }\n\n    if (this.swap) {\n      this.swap.restoreSwapItem();\n    }\n\n    if (this.push) {\n      this.push.destroy(); // @ts-ignore\n\n      delete this.push;\n    }\n\n    if (this.swap) {\n      this.swap.destroy(); // @ts-ignore\n\n      delete this.swap;\n    }\n  }\n\n  makeDrag() {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable && this.gridster.options.draggable.dropOverItemsCallback && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n\n    if (this.push) {\n      this.push.setPushedItems();\n    }\n\n    if (this.swap) {\n      this.swap.setSwapItem();\n    }\n\n    if (this.push) {\n      this.push.destroy(); // @ts-ignore\n\n      delete this.push;\n    }\n\n    if (this.swap) {\n      this.swap.destroy(); // @ts-ignore\n\n      delete this.swap;\n    }\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n\n    this.gridsterItem.$item.y = this.positionY;\n\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({\n          x: this.gridsterItem.$item.x,\n          y: this.gridsterItem.$item.y\n        });\n      }\n\n      this.push.checkPushBack();\n    }\n\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e) {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n\n    GridsterUtils.checkTouchEvent(e);\n\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n}\n\nclass GridsterPushResize {\n  constructor(gridsterItem) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster; // @ts-ignore\n\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction) {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  push(gridsterItem, direction) {\n    const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n\n    return false;\n  }\n\n  trySouth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n\n    return false;\n  }\n\n  tryNorth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n\n    return false;\n  }\n\n  tryEast(gridsterItemCollide, gridsterItem, direction) {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n\n    return false;\n  }\n\n  tryWest(gridsterItemCollide, gridsterItem, direction) {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n\n    return false;\n  }\n\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0,\n        cols: gridsterItem.item.cols || 0,\n        rows: gridsterItem.item.rows || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      });\n    }\n  }\n\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let cols;\n    let rows;\n\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass GridsterResizable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {\n      w: false,\n      e: false,\n      n: false,\n      s: false\n    };\n  }\n\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    } // @ts-ignore\n\n\n    delete this.gridsterItem; // @ts-ignore\n\n    delete this.gridster;\n  }\n\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows) - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols) - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      } else {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      }\n    } else if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      } else {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      }\n    }\n  }\n\n  dragMove(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\n    const scale = this.gridster.options.scale || 1;\n    this.directionFunction({\n      clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n      clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n    });\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize() {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy(); // @ts-ignore\n\n    delete this.push;\n    this.pushResize.destroy(); // @ts-ignore\n\n    delete this.pushResize;\n  }\n\n  makeResize() {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy(); // @ts-ignore\n\n    delete this.push;\n    this.pushResize.destroy(); // @ts-ignore\n\n    delete this.pushResize;\n  }\n\n  handleN(e) {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e) {\n    const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n    this.left = clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e) {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n\n    if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e) {\n    const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n    this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n\n    if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e) {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e) {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e) {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e) {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle() {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e) {\n    GridsterUtils.checkTouchEvent(e);\n\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n\n  setItemLeft(left) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n\n  setItemHeight(height) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n\n}\n\nlet GridsterItemComponent = /*#__PURE__*/(() => {\n  class GridsterItemComponent {\n    constructor(el, gridster, renderer, zone) {\n      this.renderer = renderer;\n      this.zone = zone;\n      this.itemInit = new EventEmitter();\n      this.itemChange = new EventEmitter();\n      this.itemResize = new EventEmitter();\n      this.el = el.nativeElement;\n      this.$item = {\n        cols: -1,\n        rows: -1,\n        x: -1,\n        y: -1\n      };\n      this.gridster = gridster;\n      this.drag = new GridsterDraggable(this, gridster, this.zone);\n      this.resize = new GridsterResizable(this, gridster, this.zone);\n    }\n\n    get zIndex() {\n      return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n    }\n\n    ngOnInit() {\n      this.gridster.addItem(this);\n    }\n\n    ngOnChanges(changes) {\n      if (changes.item) {\n        this.updateOptions();\n\n        if (!this.init) {\n          this.gridster.calculateLayoutDebounce();\n        }\n      }\n\n      if (changes.item && changes.item.previousValue) {\n        this.setSize();\n      }\n    }\n\n    updateOptions() {\n      this.$item = GridsterUtils.merge(this.$item, this.item, {\n        cols: undefined,\n        rows: undefined,\n        x: undefined,\n        y: undefined,\n        layerIndex: undefined,\n        dragEnabled: undefined,\n        resizeEnabled: undefined,\n        compactEnabled: undefined,\n        maxItemRows: undefined,\n        minItemRows: undefined,\n        maxItemCols: undefined,\n        minItemCols: undefined,\n        maxItemArea: undefined,\n        minItemArea: undefined\n      });\n    }\n\n    ngOnDestroy() {\n      this.gridster.removeItem(this); // @ts-ignore\n\n      delete this.gridster;\n      this.drag.destroy(); // @ts-ignore\n\n      delete this.drag;\n      this.resize.destroy(); // @ts-ignore\n\n      delete this.resize;\n    }\n\n    setSize() {\n      this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n      this.updateItemSize();\n    }\n\n    updateItemSize() {\n      const top = this.$item.y * this.gridster.curRowHeight;\n      const left = this.$item.x * this.gridster.curColWidth;\n      const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n      const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n      this.top = top;\n      this.left = left;\n\n      if (!this.init && width > 0 && height > 0) {\n        this.init = true;\n\n        if (this.item.initCallback) {\n          this.item.initCallback(this.item, this);\n        }\n\n        if (this.gridster.options.itemInitCallback) {\n          this.gridster.options.itemInitCallback(this.item, this);\n        }\n\n        this.itemInit.next({\n          item: this.item,\n          itemComponent: this\n        });\n\n        if (this.gridster.$options.scrollToNewItems) {\n          this.el.scrollIntoView(false);\n        }\n      }\n\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n\n        if (this.gridster.options.itemResizeCallback) {\n          this.gridster.options.itemResizeCallback(this.item, this);\n        }\n\n        this.itemResize.next({\n          item: this.item,\n          itemComponent: this\n        });\n      }\n    }\n\n    itemChanged() {\n      if (this.gridster.options.itemChangeCallback) {\n        this.gridster.options.itemChangeCallback(this.item, this);\n      }\n\n      this.itemChange.next({\n        item: this.item,\n        itemComponent: this\n      });\n    }\n\n    checkItemChanges(newValue, oldValue) {\n      if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n        return;\n      }\n\n      if (this.gridster.checkCollision(this.$item)) {\n        this.$item.x = oldValue.x || 0;\n        this.$item.y = oldValue.y || 0;\n        this.$item.cols = oldValue.cols || 1;\n        this.$item.rows = oldValue.rows || 1;\n        this.setSize();\n      } else {\n        this.item.cols = this.$item.cols;\n        this.item.rows = this.$item.rows;\n        this.item.x = this.$item.x;\n        this.item.y = this.$item.y;\n        this.gridster.calculateLayoutDebounce();\n        this.itemChanged();\n      }\n    }\n\n    canBeDragged() {\n      const gridDragEnabled = this.gridster.$options.draggable.enabled;\n      const itemDragEnabled = this.$item.dragEnabled === undefined ? gridDragEnabled : this.$item.dragEnabled;\n      return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n    }\n\n    canBeResized() {\n      const gridResizable = this.gridster.$options.resizable.enabled;\n      const itemResizable = this.$item.resizeEnabled === undefined ? gridResizable : this.$item.resizeEnabled;\n      return !this.gridster.mobile && gridResizable && itemResizable;\n    }\n\n    bringToFront(offset) {\n      if (offset && offset <= 0) {\n        return;\n      }\n\n      const layerIndex = this.getLayerIndex();\n      const topIndex = this.gridster.$options.maxLayerIndex;\n\n      if (layerIndex < topIndex) {\n        const targetIndex = offset ? layerIndex + offset : topIndex;\n        this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n      }\n    }\n\n    sendToBack(offset) {\n      if (offset && offset <= 0) {\n        return;\n      }\n\n      const layerIndex = this.getLayerIndex();\n\n      if (layerIndex > 0) {\n        const targetIndex = offset ? layerIndex - offset : 0;\n        this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n      }\n    }\n\n    getLayerIndex() {\n      if (this.item.layerIndex !== undefined) {\n        return this.item.layerIndex;\n      }\n\n      if (this.gridster.$options.defaultLayerIndex !== undefined) {\n        return this.gridster.$options.defaultLayerIndex;\n      }\n\n      return 0;\n    }\n\n  }\n\n  GridsterItemComponent.ɵfac = function GridsterItemComponent_Factory(t) {\n    return new (t || GridsterItemComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(GridsterComponent), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone));\n  };\n\n  GridsterItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GridsterItemComponent,\n    selectors: [[\"gridster-item\"]],\n    hostVars: 2,\n    hostBindings: function GridsterItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n      }\n    },\n    inputs: {\n      item: \"item\"\n    },\n    outputs: {\n      itemInit: \"itemInit\",\n      itemChange: \"itemChange\",\n      itemResize: \"itemResize\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 9,\n    vars: 8,\n    consts: [[\"class\", \"gridster-item-resizable-handler handle-s\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-e\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-n\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-w\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-se\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-ne\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-sw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-nw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"mousedown\", \"touchstart\"]],\n    template: function GridsterItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, GridsterItemComponent_div_1_Template, 1, 0, \"div\", 0);\n        i0.ɵɵtemplate(2, GridsterItemComponent_div_2_Template, 1, 0, \"div\", 1);\n        i0.ɵɵtemplate(3, GridsterItemComponent_div_3_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(4, GridsterItemComponent_div_4_Template, 1, 0, \"div\", 3);\n        i0.ɵɵtemplate(5, GridsterItemComponent_div_5_Template, 1, 0, \"div\", 4);\n        i0.ɵɵtemplate(6, GridsterItemComponent_div_6_Template, 1, 0, \"div\", 5);\n        i0.ɵɵtemplate(7, GridsterItemComponent_div_7_Template, 1, 0, \"div\", 6);\n        i0.ɵɵtemplate(8, GridsterItemComponent_div_8_Template, 1, 0, \"div\", 7);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.s && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.e && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.n && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.w && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.se && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.ne && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.sw && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.nw && ctx.resize.resizeEnabled);\n      }\n    },\n    directives: [i2.NgIf],\n    styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"],\n    encapsulation: 2\n  });\n  return GridsterItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass GridsterItemComponentInterface {}\n\nclass GridsterComponentInterface {}\n\nlet GridsterModule = /*#__PURE__*/(() => {\n  class GridsterModule {}\n\n  GridsterModule.ɵfac = function GridsterModule_Factory(t) {\n    return new (t || GridsterModule)();\n  };\n\n  GridsterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GridsterModule\n  });\n  GridsterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return GridsterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of gridster\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap }; //# sourceMappingURL=angular-gridster2.mjs.map","map":null,"metadata":{},"sourceType":"module"}